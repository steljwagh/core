#!/usr/local/bin/php
<?php

/*
 * Copyright (C) 2017-2022 Franco Fichtner <franco@opnsense.org>
 * Copyright (C) 2006 Scott Ullrich <sullrich@gmail.com>
 * Copyright (C) 2003-2005 Manuel Kasper <mk@neon1.net>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

require_once("config.inc");
require_once("auth.inc");
require_once("filter.inc");
require_once("rrd.inc");
require_once("util.inc");
require_once("system.inc");
require_once("interfaces.inc");

$argument = isset($argv[1]) ? trim($argv[1]) : '';

exit_on_bootup(function ($argument) {
    log_msg("IP renewal deferred during boot on '{$argument}'");
    file_put_contents('/tmp/newwanip_' . $argument, $argument);
}, [$argument]);

if (empty($argument)) {
    $interface = 'wan';
    $device = get_real_interface($interface);
} else {
    $interface = convert_real_interface_to_friendly_interface_name($argument);
    $device = $argument;
}

if (!isset($config['interfaces'][$interface]['enable'])) {
    log_msg("Interface '{$interface}' ($device) is disabled or empty, nothing to do.", LOG_WARNING);
    return;
}

$interface_descr = convert_friendly_interface_to_friendly_descr($interface);
$ip = get_interface_ip($interface);

$cacheip_file = "/tmp/{$device}_oldip";

if (!is_ipaddr($ip)) {
    /* remove previously cached IP since it is gone */
    @unlink($cacheip_file);

    /*
     * Take care of OpenVPN and similar if you generate the event
     * to reconfigure an interface.  OpenVPN might be in tap(4)
     * mode and not have an IP address.
     */
    if (substr($device, 0, 4) != 'ovpn') {
        log_msg("Failed to detect IP for {$interface_descr}[{$interface}]", LOG_WARNING);
        return;
    }
}

/* this may be required to cleanse the DNS information no longer available */
system_resolvconf_generate();
system_hosts_generate();

$cacheip = trim(@file_get_contents($cacheip_file));
if ($ip == $cacheip) {
    log_msg("No IP change detected for {$interface_descr}[{$interface}]", LOG_INFO);
    system_routing_configure(false, $interface); /* XXX workaround for missing default route */
    return;
}

log_msg("IP renwal starting (new: {$ip}, old: ${cacheip}, interface: {$interface_descr}[{$interface}], device: {$device})");

interfaces_vips_configure($interface, 4);

$gres = link_interface_to_gre($interface);
foreach ($gres as $gre) {
    _interfaces_gre_configure($gre);
}

$gifs = link_interface_to_gif($interface);
foreach ($gifs as $gif) {
    _interfaces_gif_configure($gif);
}

$bridge = link_interface_to_bridge($interface);
if (!empty($bridge)) {
    /* XXX _interfaces_bridge_configure() is probably cleaner */
    interface_bridge_add_member($bridge, $device);
}

if (isset($config['interfaces'][$interface]['ipaddrv6'])) {
    switch ($config['interfaces'][$interface]['ipaddrv6']) {
        case '6to4':
            interface_6to4_configure($interface, $config['interfaces'][$interface], true);
            system_routing_configure(false, $interface); /* XXX interface recreation breaks attached routes */
            break;
        case '6rd':
            interface_6rd_configure($interface, $config['interfaces'][$interface], true);
            system_routing_configure(false, $interface); /* XXX interface recreation breaks attached routes */
            break;
        case 'dhcp6':
        case 'slaac':
            if (isset($config['interfaces'][$interface]['dhcp6usev4iface'])) {
                interface_dhcpv6_prepare($interface, $config['interfaces'][$interface]);
                interface_dhcpv6_configure($interface, $config['interfaces'][$interface]);
            }
            break;
       default:
            if (isset($config['interfaces'][$interface]['dhcp6usev4iface'])) {
                interface_static6_configure($interface, $config['interfaces'][$interface]);
            }
            break;
    }
}

$restartifs = [];

foreach (legacy_config_get_interfaces(['enable' => true, 'virtual' => false]) as $ifname => $ifparent) {
    foreach ($gifs as $gif) {
        if ($ifparent['if'] == $gif['gifif']) {
            $restartifs[$ifname] = 1;
        }
    }

    foreach ($gres as $gre) {
        if ($ifparent['if'] == $gre['greif']) {
            $restartifs[$ifname] = 1;
        }
    }
}

foreach (array_keys($restartifs) as $ifname) {
    interface_configure(false, $ifname);
    system_routing_configure(false, $ifname);
}

/*
 * Interface reconfigure finished here so sync
 * firewall groups in case of destroy/create use.
 */
ifgroup_setup();

$cacheip_file = "/tmp/{$device}_oldip";
$cacheip = trim(@file_get_contents($cacheip_file));
$intf_ipaddr = $config['interfaces'][$interface]['ipaddr'] ?? 'none';

if ($ip != $cacheip || (!is_ipaddr($intf_ipaddr) && $intf_ipaddr != 'dhcp')) {
    system_routing_configure(false, $interface);
    filter_configure_sync();

    if (is_ipaddr($cacheip) && $ip != $cacheip) {
        log_msg("IP address change detected, killing states of old ip $cacheip");
        mwexecf('/sbin/pfctl -k 0.0.0.0/0 -k %s', $cacheip);
        mwexecf('/sbin/pfctl -k %s', $cacheip);
    }

    @file_put_contents($cacheip_file, $ip . PHP_EOL);

    plugins_configure('vpn', false, array($interface));
    plugins_configure('newwanip', false, array($interface));
    rrd_configure();
}
